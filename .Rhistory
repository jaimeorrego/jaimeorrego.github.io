library(mlogit)
ls
pwd
library(mlogit)
library(foreign)
clogit <- read.table("c:/work/clogit/clogit.dat",
col.names=c("mode","ttme","invc","invt","gc","chair","hinc",
"psize","indj","indi","aasc","tasc","basc","casc",
"hinca","psizea","z","nij","ni"),na.strings="-999")
library(foreign)
clogit <- read.table("/Users/jaime/Documents/R/clogit.dat",
col.names=c("mode","ttme","invc","invt","gc","chair","hinc",
"psize","indj","indi","aasc","tasc","basc","casc",
"hinca","psizea","z","nij","ni"),na.strings="-999")
clogit
summary(clogit)
str(clogit)
head(clogit)
head(clogit)
clogit$mode
clogit$mode''
save(clogit,file="/Users/jaime/Documents/R/clogit.rdata")
clogit$mode.ids<-factor(rep(1:4,210),
labels=c("air","train","bus","car"))
labels
clogit
>library(mlogit)
heating.l <- read.table('/Users/jaime/Downloads/datalong.asc')/Users/jaime/Downloads
heating.l <- read.table('/Users/jaime/Downloads/datalong.asc')
View(heating.l)
View(heating.l)
names(heating.l) = c('idcase','idalt','depvar','ic','oc','income', 'agehead', 'rooms', 'ncoast', 'scoast', 'mountn', 'valley')
names(heating.l) = c('idcase','idalt','depvar','ic','oc','income', 'agehead', 'rooms', 'ncoast', 'scoast', 'mountn', 'valley')
H = mlogit.data(heating.l, shape="long", choice="depvar", alt.var='idalt', id.var="idcase")
library(mlogit)
install.packages("mlogit")
install.packages("mlogit")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("mlogit", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
%\documentclass{beamer}
### R code from vignette source 'mlogit.rnw'
installed.packages(mlogit)
installed.packages("mlogit"")
installed.packages("mlogit")
library(mlogit)
library("mlogit")
installed.packages("mlogit")
install.packages("mlogit")
H = mlogit.data(heating.l, shape="long", choice="depvar", alt.var='idalt', id.var="idcase")
library("mlogit")
H = mlogit.data(heating.l, shape="long", choice="depvar", alt.var='idalt', id.var="idcase")
H
m1 = mlogit(depvar~ic|0, H, reflevel=5)
m1
m <- mlogit(depvar~ic+oc|0, H)
summary(m)
H
data("Fishing", package = "mlogit")
Fishing
View(Fishing)
View(Fishing)
getwd
getwd()
testdata<-dataframe()
testdata<-data.frame()
testdata=sex age 1 M22 2 F35 3 M43 4 F52 5 M58 6 F23
3
7 M36 8 F46 9 M39 10 F 31
testdata
View(testdata)
testdata(1,1)=1
testdata(1 1)=1
coffee = c(3, 1, 2, 5, 0, 2, 0, 1, 3, 2)
coffee
View(testdata)
View(testdata)
View(testdata)
testdata<-data.frame(1,1)
head(testdata)=c(male, female)
head(testdata)=c("male","female")
head
head<-c("male","female")
head(testdata)<-c("male","female")
View(Fishing)
View(H)
head(Fishing,6)
data("TravelMode", package = "AER")
install.packages("AER")
data("TravelMode", package = "AER")
View(TravelMode)
View(testdata)
View(testdata)
View(testdata)
delete()
erase()
TravelMode
View(TravelMode)
mlogit.data()
help("mlogit.data")
View(Fishing)
mlogit.data(Fishing,choice="mode",shape=("long"))
mlogit.data(Fishing,choice="mode",shape=("long"),varying = 2:9)
Fish <- mlogit.data(Fishing,choice="mode",shape=("long"),varying = 2:9)
Fish <- mlogit.data(Fishing,choice="mode",shape="wide",varying = 2:9)
View(Fish)
Fish1 <- mlogit.data(Fishing,choice="mode",shape="long",varying = 2:9)
head(index(Fish))
index(Fish)
help("index")
TM <- mlogit.data(TravelMode, choice = "choice", shape = "long",
+     chid.var = "individual", alt.var = "mode")
TM <- mlogit.data(TravelMode, choice = "choice", shape = "long",chid.var = "individual", alt.var = "mode")
View(TM)
View(TM)
View(TravelMode)
View(TM)
View(TravelMode)
help("mFormula")
f1 <- mFormula(mode ~ price + catch)
head(model.matrix(f1, Fish), 2)
summary(f1)
f1
Tr$price <- Tr$price/100 * 2.20371
View(TM)
data("Train", package = "mlogit")
View(Train)
Tr <- mlogit.data(Train, shape = "wide", choice = "choice", varying = 4:11,
+     sep = "", alt.levels = c(1, 2), id = "id")
Tr <- mlogit.data(Train, shape = "wide", choice = "choice", varying = 4:11,sep = "", alt.levels = c(1, 2), id = "id")
Tr$price <- Tr$price/100 * 2.20371
Tr$time <- Tr$time/60
View(Train)
View(Tr)
ml.Train <- mlogit(choice ~ price + time + change + comfort |-1, Tr)
summary(ml.Train)
coef(ml.Train)[-1]
coef(ml.Train)
coef(ml.Train)[1]
coef(ml.Train)[-1]/coef(ml.Train)[1]
hel("mlogit")
help("mlogit")
View(Train)
View(Fish)
View(Fishing)
View(Fish)
load("~/Documents/Phd/DISCHOMOD/HW2.1.RData")
library(xlsx)
write.xlsx(swissmetro, file="Swiss.xlsx", sheetName="Sheet1", col.names=TRUE, row.names=TRUE, append=FALSE)
write.xlsx2(swissmetro, file="Swiss.xlsx", sheetName="Sheet1", col.names=TRUE, row.names=TRUE, append=FALSE)
write.xlsx2(swissmetro, file="Swiss11.xlsx", sheetName="Sheet1", col.names=TRUE, row.names=TRUE, append=FALSE)
install.packages("XLConnect")
install.packages("XLConnect")
install.packages("devtools")
library("devtools")
install_git(ggplot)
install_git(ggplot2)
devtools::install_github("tidyverse/ggplot2")
install.packages("sf")
install.packages("sf")
devtools::install_github("dgrtwo/gganimate")
library(tidyverse) # dev ggplot version required: devtools::install_github("hadley/ggplot2")
library(sf)
library(readxl)
library(httr)
library(ggmap)
library(gganimate) # devtools::install_github("dgrtwo/gganimate")
library(hrbrthemes) # devtools::install_github("hrbrmstr/hrbrthemes")
install.packages("tidyverse")
library(tidyverse) # dev ggplot version required: devtools::install_github("hadley/ggplot2")
library(sf)
library(readxl)
library(httr)
library(ggmap)
library(gganimate) # devtools::install_github("dgrtwo/gganimate")
library(hrbrthemes) # devtools::install_github("hrbrmstr/hrbrthemes")
install.packages("ggmap")
library(ggmap)
library(gganimate) # devtools::install_github("dgrtwo/gganimate")
library(hrbrthemes) # devtools::install_github("hrbrmstr/hrbrthemes")
devtools::install_github("hrbrmstr/hrbrthemes")
URL <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_map_units.zip"
temp <- tempfile()
download.file(URL, temp)
unzip(temp)
unlink(temp)
# read in shapefile as an sf object and set the projection
# this will be our base world map for plot sans Antarctica
world <- st_read("ne_110m_admin_0_map_units.shp") %>%
st_transform(crs = "+proj=longlat +datum=WGS84") %>%
filter(!NAME %in% c("Fr. S. Antarctic Lands", "Antarctica"))
# download dataset into your working directory
url <- "https://www.blog.cultureofinsight.com/data/wc.xlsx"
GET(url, write_disk("wc.xlsx", overwrite=TRUE))
# read in our the massive 20 rows of data and get the winner/runner-up variable in 1 column #tidyafdata
# setting factor for winner to show first in the legend
winners <- read_excel("wc.xlsx") %>%
gather(w_l, country, winner:runner_up) %>%
mutate(w_l = factor(w_l, levels = c("winner", "runner_up")))
# merge our world shape file with our main dataset
# this will add the polygon for the appropriate country to each row of our winners dataset
# and remove any countries that haven't won or come 2nd in the WC
wc_geo <- merge(world, winners, by.x = "NAME", by.y = "country")
# get the lon/lat coordinates of the world cup final locations via ggmap::geocode
# add year and final placenames from winners data then transorm into an sf object with same proj as basemap
# finally mutate 2 columns for lon/lat (x + y) to use for plotting text
locations_sf <- geocode(winners[1:20,]$Location) %>%
cbind(winners[1:20, 1:2]) %>%
st_as_sf(coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84", agr = "constant") %>%
mutate(x = sapply(geometry, "[[", 1), y = sapply(geometry, "[[", 2))
View(winners)
View(winners)
locations_sf <- geocode(winners[1:20,]$Location[0:30]) %>%
cbind(winners[1:20, 1:2]) %>%
st_as_sf(coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84", agr = "constant") %>%
mutate(x = sapply(geometry, "[[", 1), y = sapply(geometry, "[[", 2))
locations_sf <- geocode(winners[1:20,]$Location[0:28]) %>%
cbind(winners[1:20, 1:2]) %>%
st_as_sf(coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84", agr = "constant") %>%
mutate(x = sapply(geometry, "[[", 1), y = sapply(geometry, "[[", 2))
# get the lon/lat coordinates of the world cup final locations via ggmap::geocode
# add year and final placenames from winners data then transorm into an sf object with same proj as basemap
# finally mutate 2 columns for lon/lat (x + y) to use for plotting text
locations_sf <- geocode(winners[1:20,]$Location[0:10]) %>%
cbind(winners[1:20, 1:2]) %>%
st_as_sf(coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84", agr = "constant") %>%
mutate(x = sapply(geometry, "[[", 1), y = sapply(geometry, "[[", 2))
# get the lon/lat coordinates of the world cup final locations via ggmap::geocode
# add year and final placenames from winners data then transorm into an sf object with same proj as basemap
# finally mutate 2 columns for lon/lat (x + y) to use for plotting text
locations_sf <- geocode(winners[1:20,]$Location[1]) %>%
cbind(winners[1:20, 1:2]) %>%
st_as_sf(coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84", agr = "constant") %>%
mutate(x = sapply(geometry, "[[", 1), y = sapply(geometry, "[[", 2))
View(locations_sf)
View(locations_sf)
# plot base map + filtered map with fill on winner/runner-up variable and frame as year for animation
# then a point at each final location along with the place name text
# set the projection and all the theme commands to give it a dark and mysterious aesthetic
wc_map <- ggplot() +
geom_sf(data = world, colour = "#ffffff20", fill = "#2d2d2d60", size = .5) +
geom_sf(data = wc_geo, aes(fill = w_l, frame = Year)) +
geom_sf(data = locations_sf, aes(frame = Year), size = .2, colour = "#ffffff90") +
geom_text(data = locations_sf, aes(x, y, label = Location, frame = Year),
colour = "white", fill = "#00000040", nudge_y = -5) +
coord_sf(crs = st_crs(world), datum = NA) +
labs(title = "FIFA World Cup Winners, Runners Up & Final Locations", x=NULL, y=NULL,
caption = "Culture of Insight / @paulcampbell91 / Source: Wikipedia") +
theme_modern_rc(axis = FALSE, base_size = 16, caption_size = 18) +
scale_fill_manual(values = c("#D9A441", "#A8A8A8"), name = NULL, labels = c("Winner", "Runner-Up")) +
theme(legend.position = c(0.9, 1.01), legend.direction = "horizontal", axis.text = element_blank(),
panel.grid.minor = element_blank(), panel.grid.major = element_blank())
library(hrbrthemes) # devtools::install_github("hrbrmstr/hrbrthemes")
# plot base map + filtered map with fill on winner/runner-up variable and frame as year for animation
# then a point at each final location along with the place name text
# set the projection and all the theme commands to give it a dark and mysterious aesthetic
wc_map <- ggplot() +
geom_sf(data = world, colour = "#ffffff20", fill = "#2d2d2d60", size = .5) +
geom_sf(data = wc_geo, aes(fill = w_l, frame = Year)) +
geom_sf(data = locations_sf, aes(frame = Year), size = .2, colour = "#ffffff90") +
geom_text(data = locations_sf, aes(x, y, label = Location, frame = Year),
colour = "white", fill = "#00000040", nudge_y = -5) +
coord_sf(crs = st_crs(world), datum = NA) +
labs(title = "FIFA World Cup Winners, Runners Up & Final Locations", x=NULL, y=NULL,
caption = "Culture of Insight / @paulcampbell91 / Source: Wikipedia") +
theme_modern_rc(axis = FALSE, base_size = 16, caption_size = 18) +
scale_fill_manual(values = c("#D9A441", "#A8A8A8"), name = NULL, labels = c("Winner", "Runner-Up")) +
theme(legend.position = c(0.9, 1.01), legend.direction = "horizontal", axis.text = element_blank(),
panel.grid.minor = element_blank(), panel.grid.major = element_blank())
# plot base map + filtered map with fill on winner/runner-up variable and frame as year for animation
# then a point at each final location along with the place name text
# set the projection and all the theme commands to give it a dark and mysterious aesthetic
wc_map <-
ggplot() +
geom_sf(data = world, colour = "#ffffff20", fill = "#2d2d2d60", size = .5) +
geom_sf(data = wc_geo, aes(fill = w_l, frame = Year)) +
geom_sf(data = locations_sf, aes(frame = Year), size = .2, colour = "#ffffff90") +
geom_text(data = locations_sf, aes(x, y, label = Location, frame = Year),
colour = "white", fill = "#00000040", nudge_y = -5) +
coord_sf(crs = st_crs(world), datum = NA) +
labs(title = "FIFA World Cup Winners, Runners Up & Final Locations", x=NULL, y=NULL,
caption = "Culture of Insight / @paulcampbell91 / Source: Wikipedia") +
theme_modern_rc(axis = FALSE, base_size = 16, caption_size = 18) +
scale_fill_manual(values = c("#D9A441", "#A8A8A8"), name = NULL, labels = c("Winner", "Runner-Up")) +
theme(legend.position = c(0.9, 1.01), legend.direction = "horizontal", axis.text = element_blank(),
panel.grid.minor = element_blank(), panel.grid.major = element_blank())
ggplot() +
geom_sf(data = world, colour = "#ffffff20", fill = "#2d2d2d60", size = .5) +
geom_sf(data = wc_geo, aes(fill = w_l, frame = Year)) +
geom_sf(data = locations_sf, aes(frame = Year), size = .2, colour = "#ffffff90") +
geom_text(data = locations_sf, aes(x, y, label = Location, frame = Year),
colour = "white", fill = "#00000040", nudge_y = -5) +
coord_sf(crs = st_crs(world), datum = NA) +
labs(title = "FIFA World Cup Winners, Runners Up & Final Locations", x=NULL, y=NULL,
caption = "Culture of Insight / @paulcampbell91 / Source: Wikipedia") +
theme_modern_rc(axis = FALSE, base_size = 16, caption_size = 18) +
scale_fill_manual(values = c("#D9A441", "#A8A8A8"), name = NULL, labels = c("Winner", "Runner-Up")) +
theme(legend.position = c(0.9, 1.01), legend.direction = "horizontal", axis.text = element_blank(),
panel.grid.minor = element_blank(), panel.grid.major = element_blank())
# set animation interval as 2 seconds, create the gif, and Robert's your Father's brother
animation::ani.options(interval = 2)
gganimate(wc_map, ani.width =  1250, ani.height = 585, "wc.gif", title_frame = TRUE)
# get the lon/lat coordinates of the world cup final locations via ggmap::geocode
# add year and final placenames from winners data then transorm into an sf object with same proj as basemap
# finally mutate 2 columns for lon/lat (x + y) to use for plotting text
locations_sf <- geocode(winners[1:20,]$Location) %>%
cbind(winners[1:20, 1:2]) %>%
st_as_sf(coords = c("lon", "lat"), crs = "+proj=longlat +datum=WGS84", agr = "constant") %>%
mutate(x = sapply(geometry, "[[", 1), y = sapply(geometry, "[[", 2))
View(locations_sf)
View(locations_sf)
View(locations_sf)
ggplot() +
geom_sf(data = world, colour = "#ffffff20", fill = "#2d2d2d60", size = .5) +
geom_sf(data = wc_geo, aes(fill = w_l, frame = Year)) +
geom_sf(data = locations_sf, aes(frame = Year), size = .2, colour = "#ffffff90") +
# geom_text(data = locations_sf, aes(x, y, label = Location, frame = Year),
#           colour = "white", fill = "#00000040", nudge_y = -5) +
coord_sf(crs = st_crs(world), datum = NA) +
labs(title = "FIFA World Cup Winners, Runners Up & Final Locations", x=NULL, y=NULL,
caption = "Culture of Insight / @paulcampbell91 / Source: Wikipedia") +
theme_modern_rc(axis = FALSE, base_size = 16, caption_size = 18) +
scale_fill_manual(values = c("#D9A441", "#A8A8A8"), name = NULL, labels = c("Winner", "Runner-Up")) +
theme(legend.position = c(0.9, 1.01), legend.direction = "horizontal", axis.text = element_blank(),
panel.grid.minor = element_blank(), panel.grid.major = element_blank())
# set animation interval as 2 seconds, create the gif, and Robert's your Father's brother
animation::ani.options(interval = 2)
gganimate(wc_map, ani.width =  1250, ani.height = 585, "wc.gif", title_frame = TRUE)
file.choose()
Lisbon<-st_read("/Users/jaime/Downloads/datamanualcountscyclistslisbonmay2007/PontosContagem2017_Time.shp")
Lisbon<-st_read("/Users/jaime/Downloads/datamanualcountscyclistslisbonmay2007/PontosContagem2017_Time.shp")
View(Lisbon)
View(Lisbon)
ggplot() +
geom_sf(Lisbon)
ggplot() +
geom_sf(data=Lisbon)
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
ggplot(nc) +
geom_sf(aes(fill = AREA))
nc_3857 <- sf::st_transform(nc, "+init=epsg:3857")
ggplot() +
geom_sf(data = nc) +
geom_sf(data = nc_3857, colour = "red", fill = NA)
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
ggplot(nc) +
geom_sf(aes(fill = AREA)) +
scale_fill_viridis("Area") +
ggtitle("Area of counties in North Carolina") +
theme_bw()
install.packages("viridis")
library(viridis)
ggplot(nc) +
geom_sf(aes(fill = AREA)) +
scale_fill_viridis("Area") +
ggtitle("Area of counties in North Carolina") +
theme_bw()
install.packages("pdftools")
install.packages("Rcpp")
install.packages("tinytex")
install.packages("vitae")
R.version
install.packages("latexpdf")
unlink('resume/resume_cache', recursive = TRUE)
tinytex::install_tinytex()
install.packages("tidyverse")
install.packages("usethis")
library(usethis)
use_git_config(user.name = "jaimeorrego", user.email = "jaime.orrego@gmail.com")
usethis::git_default_branch_configure()
usethis::create_github_token()
gitcreds::gitcreds_set()
quarto::quarto_render()
getwd()
setwd("/Users/jaime/IDrive-Sync/Work/jaimeorrego.github.io/")
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
`2013` L.J. Basso, C.E. Cortés, **J. Orrego Oñate**. [Funciones de Congestión en Corredores Segregados de Buses usando Microsimulación](pdfs/2013_1.pdf). Presented at the *XVI Congreso Chileno de Ingeniería de Transporte, Santiago, Chile*. August, 2013
devtools::install_github("DanielHermosilla/ecological-inference-elections")
usethis::edit_r_environ()
Sys.unsetenv("GITHUB_PAT")
if ("gitcreds" %in% rownames(installed.packages())) {
gitcreds::gitcreds_delete()
}
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("DanielHermosilla/ecological-inference-elections")
install.packages("remotes")  # if not already installed
remotes::install_github("DanielHermosilla/ecological-inference-elections")
remotes::install_github("DanielHermosilla/ecological-inference-elections")
remotes::install_github("DanielHermosilla/ecological-inference-elections")
usethis::edit_r_environ()
usethis::edit_r_environ()
gitcreds::gitcreds_set()
remotes::install_github("DanielHermosilla/ecological-inference-elections")
gitcreds::gitcreds_set()
remotes::install_github("DanielHermosilla/ecological-inference-elections")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
writeLines("CC=clang\nCXX=clang++", con = "~/.R/Makevars")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
remotes::install_github("DanielHermosilla/ecological-inference-elections")
