---
title: "Barcelona Regressions"
format: html
editor: visual
---

### Quarto Notebook: Modeling the Electoral Impact of Superblocks

```{r}
# Load required libraries
suppressPackageStartupMessages({library(tidyverse)   # For data manipulation
library(sf)          # For spatial data handling
library(plm)         # Panel data models
library(AER)         # Instrumental variables (not used yet)
library(stargazer)   # Regression tables
library(spdep)       # Spatial dependencies
library(spatialreg)  # Spatial regression models
library(splm)        # Spatial panel models
library(lme4)        # Optional: mixed models if needed
library(broom) })      # Tidy model summaries
```

## Step 1: Read and Prepare Data

```{r}
# Read spatial tracts and modeling dataset
tracts <- read_rds("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/Tracts.rds")
raw_data <- read_rds("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/Models_data.rds")

# Prepare modeling dataset
mod_data <- raw_data %>% 
  mutate(Year = as.factor(Year), 
         GEOID = as.factor(GEOID), 
         Vote_share = Votes / Electors)

# Filter for BEC vote in municipal elections in selected years
bec_data <- mod_data %>% 
  filter(Political_Party == "BEC", 
         Election == "Municipal", 
         Year %in% c("2015", "2019", "2023"))
```

## Step 2: OLS Model (Pooled Cross-Section)

This model estimates the relationship between the presence of a Superblock and vote share using a standard linear regression. It includes year dummies to control for time effects but does not account for unobserved spatial heterogeneity.

**Model formula:** $$\text{VoteShare}_{it} = \alpha + \beta_1 \text{Superblock}_{it} + \beta_2 \text{Year}_t + \beta_3 X_{it} + \varepsilon_{it}$$

```{r}
#| eval: false
mod_ols <- lm(Vote_share ~ Superblock + Year + Pop_den + Income, data = bec_data)
summary(mod_ols)
```

## Step 3: Two-way Fixed Effects Model

This model estimates the effect of Superblocks on vote share while **controlling for two types of confounding influences**:

1.  **Time-invariant differences across spatial units** (i.e., across census tracts), such as:
    -   Long-standing political preferences
    -   Historical infrastructure
    -   Demographic composition that does not change over time
2.  **Year-specific effects** that affect **all tracts** in the same way, such as:
    -   National political events
    -   Macroeconomic shocks
    -   Media coverage in a given election cycle

These are known as **unit fixed effects** $\alpha_i$ and **time fixed effects** $\delta_t$, respectively.

------------------------------------------------------------------------

### What this model does

The model applies what’s called the **within transformation**, which subtracts the average value of each variable for:

-   Each tract (across all time periods)
-   Each year (across all tracts)

This transformation ensures that we are analyzing only the **variation within each tract over time**, after removing both time-invariant differences between tracts and shared year-to-year trends.

> In other words, it asks:\
> “*Did vote share in a given tract increase more than usual **after** a Superblock was implemented — above and beyond that tract's own baseline and the general trend that year?*”

------------------------------------------------------------------------

### Model formula (Two-Way Fixed Effects):

$$
\text{VoteShare}_{it} = \alpha_i + \delta_t + \beta \cdot \text{Superblock}_{it} + \gamma \cdot X_{it} + \varepsilon_{it}
$$

Where:

$$
\begin{aligned}
\alpha_i &:\ \text{tract (unit) fixed effects} \\
\delta_t &:\ \text{year (time) fixed effects} \\
\text{Superblock}_{it} &:\ \text{treatment variable} \\
X_{it} &:\ \text{control variables (e.g., population density, income)} \\
\varepsilon_{it} &:\ \text{error term}
\end{aligned}
$$

```{r}
#| eval: false
pdata <- pdata.frame(bec_data, index = c("GEOID", "Year"))
mod_fe_tw <- plm(Vote_share ~ Superblock + Pop_den + Income, 
                 data = pdata, model = "within", effect = "twoways")
summary(mod_fe_tw)
```

## Step 4: First-Difference Model

The **first-difference model** is another method used to estimate the effect of Superblocks on vote share. Like the fixed effects model, it aims to eliminate **time-invariant confounding factors** — characteristics of a place that don’t change over time and might bias the results.

But instead of subtracting the average (as in fixed effects), this model **subtracts the previous year’s value from the current year’s value** for each variable. In other words, it focuses on **how things changed** from one election to the next within each census tract.

------------------------------------------------------------------------

### Why use this model?

By differencing the data, we remove any characteristics of each tract that stay constant over time — such as:

-   Geographic location
-   Long-term political alignment
-   Fixed infrastructure or urban design

This is similar in goal to the fixed effects model but uses a simpler transformation.

------------------------------------------------------------------------

### Strengths and Limitations

**Strengths:**

-   Very intuitive: it looks at **changes over time**, not levels.
-   Eliminates all time-invariant bias automatically.

**Limitations:**

-   It can be **more sensitive to noise** or random variation between years.
-   If the treatment effect builds gradually over time, differencing might **miss** longer-term effects.
-   It only works when you have **at least two time points per unit**.

In your case (three time points: 2015, 2019, 2023), the model uses **two change periods**:\
one from 2015–2019 and one from 2019–2023.

------------------------------------------------------------------------

### Model formula (First-Difference):

$$
\Delta \text{VoteShare}_{it} = \beta \cdot \Delta \text{Superblock}_{it} + \gamma \cdot \Delta X_{it} + \Delta \varepsilon_{it}
$$

Where:

$$
\begin{aligned}
\Delta \text{VoteShare}_{it} &:\ \text{Change in vote share from the previous election} \\
\Delta \text{Superblock}_{it} &:\ \text{Change in Superblock status (e.g., newly implemented)} \\
\Delta X_{it} &:\ \text{Change in control variables (e.g., population density, income)} \\
\Delta \varepsilon_{it} &:\ \text{Change in unobserved factors or shocks}
\end{aligned}
$$ ---

```{r}
#| eval: false
fd_data <- bec_data %>%
  arrange(GEOID, Year) %>%
  group_by(GEOID) %>%
  mutate(
    d_Vote = Vote_share - lag(Vote_share),
    d_Superblock = Superblock - lag(Superblock),
    d_Pop_den = Pop_den - lag(Pop_den),
    d_Income = Income - lag(Income),
    Period = case_when(
      Year == 2019 ~ "2015-2019",
      Year == 2023 ~ "2019-2023",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(d_Vote)) %>%
  ungroup()

mod_fd <- lm(d_Vote ~ d_Superblock + d_Pop_den + d_Income + Period, data = fd_data)
summary(mod_fd)
```

## Step 5: Build Spatial Weights

```{r}
#| eval: false
tracts <- tracts %>% arrange(GEOID)
bec_data <- left_join(tracts, bec_data %>% select(-geometry))

nb <- poly2nb(tracts)
mat <- nb2mat(nb)
unique_codigo <- unique(tracts$GEOID)
rownames(mat) <- unique_codigo
colnames(mat) <- unique_codigo
listW <- mat2listw(mat, style = "W")
```

## Step 6: Create Density Measures

```{r}
#| eval: false
mod_data <- mod_data %>%
  mutate(Area = as.numeric(st_area(.)) / 1e6,
         cycleway_length_density = cycleway_length / (1000 * Area),
         pedestrian_length_density = pedestrian_length / (1000 * Area),
         livingstreet_length_density = livingstreet_length / (1000 * Area))

mod_data[is.na(mod_data)] <- 0
```

## Step 7: Spatial Cross-Sectional Models

Traditional regression models assume that each observation (e.g., each census tract) is independent of the others. But in spatial data, this assumption often fails: what happens in one area may influence — or be influenced by — neighboring areas.

For example:

-   Voters may be influenced by campaign activities or media exposure from nearby districts.
-   Infrastructure improvements in one neighborhood can spill over into others.
-   Unobserved factors like political networks or local culture may be spatially clustered.

To address this, spatial regression models account for **spatial dependence** — the idea that observations located near one another may be statistically related.

------------------------------------------------------------------------

### Spatial Lag Model (SAR)

The SAR model assumes that the **vote share in one tract depends on the vote share in neighboring tracts**. This reflects spatial spillovers in the outcome.

$$
y = \rho W y + X\beta + \varepsilon
$$

Where:

$$
\begin{aligned}
y &: \text{Vector of vote shares} \\
\rho &: \text{Spatial lag coefficient (strength of spillover)} \\
W &: \text{Spatial weights matrix (defines neighbors)} \\
X\beta &: \text{Linear combination of covariates (e.g., Superblock, controls)} \\
\varepsilon &: \text{Uncorrelated error term}
\end{aligned}
$$

------------------------------------------------------------------------

### Spatial Error Model (SEM)

The SEM model assumes that **unobserved factors influencing vote share are spatially correlated** — even if vote shares themselves don’t directly influence each other.

$$
y = X\beta + u,\quad u = \lambda W u + \varepsilon
$$

Where:

$$
\begin{aligned}
u &: \text{Spatially correlated error component} \\
\lambda &: \text{Spatial autocorrelation in the error} \\
\varepsilon &: \text{Independent random noise}
\end{aligned}
$$

------------------------------------------------------------------------

### Spatial Autoregressive Combined Model (SAC)

The SAC model combines both spatial lag and spatial error. It assumes that vote share is influenced by neighboring outcomes **and** that **unobserved spatially clustered factors** are present in the residuals.

$$
y = \rho W y + X\beta + u,\quad u = \lambda W u + \varepsilon
$$

Where:

$$
\begin{aligned}
\rho &: \text{Lag effect — how neighbors' outcomes influence own outcome} \\
\lambda &: \text{Error effect — how unobserved spatial factors are clustered} \\
W &: \text{Spatial weights matrix used in both components}
\end{aligned}
$$

------------------------------------------------------------------------

These models are estimated using **pooled cross-sectional data** from 2015, 2019, and 2023, and provide a way to test whether spatial structure alters the estimated impact of Superblocks on BEC vote share.

------------------------------------------------------------------------

```{r}
#| eval: false
listW_panel <- listw2mat(listW)
listW_big <- kronecker(diag(3), listW_panel)
listW_big_list <- mat2listw(listW_big, style = "W")

mod_sar <- lagsarlm(Vote_share ~ Superblock + Pop_den + Income + factor(Year),
                    data = bec_data, listw = listW_big_list)
mod_sem <- errorsarlm(Vote_share ~ Superblock + Pop_den + Income + factor(Year),
                      data = bec_data, listw = listW_big_list)
mod_sac <- sacsarlm(Vote_share ~ Superblock + Pop_den + Income + factor(Year),
                    data = bec_data, listw = listW_big_list)
```

## Step 8: Spatial Panel Model (SARAR)

This model is the most comprehensive in our analysis. It combines:

-   **Fixed effects** for each spatial unit (tract) and each year\
-   **Spatial lag** of the dependent variable\
-   **Spatial correlation in the error term**

In simpler terms, it accounts for the fact that: - A tract's vote share may be influenced by the vote share in **neighboring tracts**\
- **Unobserved factors** that affect voting may also be **spatially clustered** - And each tract has its own stable, unchanging characteristics, plus all units are affected by **year-specific trends**

------------------------------------------------------------------------

### Why use this model?

The SARAR panel model is especially useful when:

-   Your data includes **both time and space dimensions** (panel data)
-   There are reasons to believe in **both spatial spillovers** and **spatially structured unobservables**
-   You want to control for **unobserved heterogeneity** across units and time, just like in fixed effects

------------------------------------------------------------------------

### Model formula (Spatial Panel SARAR):

$$
y_{it} = \rho W y_{it} + X_{it} \beta + u_{it},\quad u_{it} = \lambda W u_{it} + \varepsilon_{it}
$$

Where:

$$
\begin{aligned}
y_{it} &: \text{Vote share in tract } i \text{ at time } t \\
\rho &: \text{Spatial lag parameter — influence of neighbors' vote shares} \\
W &: \text{Spatial weights matrix defining neighbors} \\
X_{it} &: \text{Matrix of explanatory variables (e.g., Superblock, controls)} \\
\beta &: \text{Vector of coefficients} \\
u_{it} &: \text{Spatially correlated unobserved error term} \\
\lambda &: \text{Spatial autocorrelation in the error structure} \\
\varepsilon_{it} &: \text{Unstructured random error}
\end{aligned}
$$

------------------------------------------------------------------------

This model provides the **most robust estimate** of the Superblock effect by combining all the strengths of the previous models:

-   Fixed effects (as in FE and FD)
-   Spatial spillovers (as in SAR)
-   Spatially correlated errors (as in SEM and SAC)

```{r}
#| eval: false
bec_panel <- pdata.frame(bec_data %>% st_drop_geometry(), index = c("GEOID", "Year"))

mod_spml_sarar <- spml(
  formula = Vote_share ~ Superblock + Pop_den + Income,
  data = bec_panel,
  index = c("GEOID", "Year"),
  listw = listW,
  model = "within",
  effect = "twoways",
  lag = TRUE,
  spatial.error = "b",
  durbin = FALSE
)
summary(mod_spml_sarar)
```

## Load Model Results

```{r}
mod_ols <- readRDS("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/models/mod_ols.rds")
mod_fe_tw <- readRDS("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/models/mod_fe_tw.rds")
mod_fd <- readRDS("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/models/mod_fd.rds")
mod_sar <- readRDS("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/models/mod_sar.rds")
mod_sem <- readRDS("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/models/mod_sem.rds")
mod_sac <- readRDS("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/models/mod_sac.rds")
mod_spml_sarar <- readRDS("/Users/jaime/IDrive-Sync/Work/UAB/Research/Proyectos/atrapa/Data/models/mod_spml_sarar.rds")
```

## Step 10: Final Table and Comments

```{r}
# Combine all model results using broom
# Extract coefficient table
coefs <- coef(mod_spml_sarar)
se <- sqrt(diag(vcov(mod_spml_sarar)))
t_stat <- coefs / se
p_val <- 2 * (1 - pnorm(abs(t_stat)))  # Normal approximation

# Convert to tibble
tidy_spml_sarar <- tibble(
  term = names(coefs),
  estimate = coefs,
  std.error = se,
  statistic = t_stat,
  p.value = p_val,
  model = "SPML-SARAR"
)

model_summaries <- bind_rows(
  tidy(mod_ols) %>% mutate(model = "OLS"),
  tidy(mod_fe_tw) %>% mutate(model = "Two-Way FE"),
  tidy(mod_fd) %>% mutate(model = "First Diff"),
  tidy(mod_sar) %>% mutate(model = "SAR"),
  tidy(mod_sem) %>% mutate(model = "SEM"),
  tidy(mod_sac) %>% mutate(model = "SAC"),
  tidy_spml_sarar
)

# Filter for Superblock term(s) only and display in table
model_summary_table <- model_summaries %>%
  filter(str_detect(term, "Superblock")) %>%
  select(model, term, estimate, std.error, statistic, p.value) %>%
  arrange(model)

print(model_summary_table)
```

### Interpretation:

-   The `Superblock` effect is **positive and statistically significant** across most models.
-   The effect is largest in the naive OLS model and shrinks in more rigorous specifications.
-   The spatial panel SARAR model offers a **conservative and robust estimate**, suggesting the effect is real but modest after controlling for all spatial and fixed effects.
-   This robustness across modeling strategies adds credibility to the finding.

## Step 10: Model Summary Table with Spatial Parameters and Fit Statistics

```{r}
# Load required packages
library(broom)
library(dplyr)
library(tidyr)
library(gt)
library(glue)

# Define helper to format p-values safely (vectorized)
format_p <- function(p) {
  ifelse(
    is.na(p),
    "p = NA",
    ifelse(p < 0.001, "p < 0.001", paste0("p = ", round(p, 3)))
  )
}

####### COEFFICIENT TABLE #######

# Get tidy output from all supported models
tidy_all <- bind_rows(
  tidy(mod_ols) %>% mutate(model = "OLS"),
  tidy(mod_fe_tw) %>% mutate(model = "FE"),
  tidy(mod_fd) %>% mutate(model = "FD"),
  tidy(mod_sar) %>% mutate(model = "SAR"),
  tidy(mod_sem) %>% mutate(model = "SEM"),
  tidy(mod_sac) %>% mutate(model = "SAC")
)

# Standardize variable names and format p-values with line breaks
tidy_all <- tidy_all %>%
  mutate(term = term %>%
           gsub("^factor\\(Year\\)", "Year", .) %>%
           gsub("^Superblock1$", "Superblock", .) %>%
           gsub("^d_Superblock$", "Superblock", .) %>%
           gsub("^d_Income$", "Income", .) %>%
           gsub("^d_Pop_den$", "Pop_den", .)) %>%
  mutate(label = glue("{round(estimate, 4)}<br><span style='font-size: 85%; color: #666;'>{format_p(p.value)}</span>")) %>%
  select(term, label, model)

# Add SPML-SARAR model manually
sarar_coefs <- coef(mod_spml_sarar)
sarar_se <- sqrt(diag(vcov(mod_spml_sarar)))
sarar_p <- 2 * (1 - pnorm(abs(sarar_coefs / sarar_se)))

# Also apply to SPML model
sarar_df <- tibble(
  term = names(sarar_coefs),
  estimate = sarar_coefs,
  p.value = sarar_p
) %>%
  mutate(
    term = term %>%
      gsub("^factor\\(Year\\)", "Year", .) %>%
      gsub("^Superblock1$", "Superblock", .),
    label = glue("{round(estimate, 4)}<br><span style='font-size: 85%; color: #666;'>{format_p(p.value)}</span>"),
    model = "SPML"
  ) %>%
  select(term, label, model)

# Combine all models
tidy_all <- bind_rows(tidy_all, sarar_df)

# Pivot to wide format for display
summary_wide <- tidy_all %>%
  pivot_wider(names_from = model, values_from = label)

# Display coefficient table
summary_wide %>%
  rename(Variable = term) %>%
  gt() %>%
  tab_header(title = "Model Coefficients with p-values")%>%
  fmt_markdown(columns = everything()) 


####### FIT STATISTICS TABLE #######

# Collect fit metrics from each model
fit_stats <- tibble(
  Model = c("OLS", "FE", "FD", "SAR", "SEM", "SAC", "SPML"),
  R2 = c(
    summary(mod_ols)$r.squared,
    summary(mod_fe_tw)$r.squared[["rsq"]],
    summary(mod_fd)$r.squared,
    NA, NA, NA, NA
  ),
  Adj_R2 = c(
    summary(mod_ols)$adj.r.squared,
    summary(mod_fe_tw)$r.squared[["adjrsq"]],
    summary(mod_fd)$adj.r.squared,
    NA, NA, NA, NA
  ),
  LogLik = c(
    logLik(mod_ols)[1],
    NA,
    logLik(mod_fd)[1],
    mod_sar$LL,
    mod_sem$LL,
    mod_sac$LL,
    NA  # SPML logLik not compatible with logLik()
  ),
  AIC = c(
    AIC(mod_ols),
    NA,
    AIC(mod_fd),
    AIC(mod_sar),
    AIC(mod_sem),
    AIC(mod_sac),
    NA
  ),
  BIC = c(
    BIC(mod_ols),
    NA,
    BIC(mod_fd),
    BIC(mod_sar),
    BIC(mod_sem),
    BIC(mod_sac),
    NA  # BIC not available for SPML
  ),
  Rho = c(
    NA, NA, NA,
    mod_sar$rho,
    NA,
    mod_sac$rho,
    mod_spml_sarar$coefficients[2]  # typically rho
  ),
  Lambda = c(
    NA, NA, NA,
    NA,
    mod_sem$lambda,
    mod_sac$lambda,
    mod_spml_sarar$coefficients[1]  # typically lambda
  )
)

# Display fit statistics table
fit_stats %>%
  mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
  gt() %>%
  tab_header(title = "Model Fit Statistics")
```
